/**
 *
 * $Id$
 */
package org.polarsys.capella.core.data.interaction.validation;

import org.eclipse.emf.common.util.EList;

import org.polarsys.capella.core.data.capellacore.Constraint;

import org.polarsys.capella.core.data.cs.Part;

import org.polarsys.capella.core.data.fa.AbstractFunction;

import org.polarsys.capella.core.data.interaction.ConstraintDuration;
import org.polarsys.capella.core.data.interaction.Event;
import org.polarsys.capella.core.data.interaction.Gate;
import org.polarsys.capella.core.data.interaction.InstanceRole;
import org.polarsys.capella.core.data.interaction.InteractionFragment;
import org.polarsys.capella.core.data.interaction.Scenario;
import org.polarsys.capella.core.data.interaction.ScenarioKind;
import org.polarsys.capella.core.data.interaction.ScenarioRealization;
import org.polarsys.capella.core.data.interaction.SequenceMessage;
import org.polarsys.capella.core.data.interaction.TimeLapse;

/**
 * A sample validator interface for {@link org.polarsys.capella.core.data.interaction.Scenario}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface ScenarioValidator {
	boolean validate();

	boolean validateKind(ScenarioKind value);
	boolean validateMerged(boolean value);
	boolean validatePreCondition(Constraint value);
	boolean validatePostCondition(Constraint value);
	boolean validateOwnedInstanceRoles(EList<InstanceRole> value);
	boolean validateOwnedMessages(EList<SequenceMessage> value);
	boolean validateOwnedInteractionFragments(EList<InteractionFragment> value);
	boolean validateOwnedTimeLapses(EList<TimeLapse> value);
	boolean validateOwnedEvents(EList<Event> value);
	boolean validateOwnedFormalGates(EList<Gate> value);
	boolean validateOwnedScenarioRealization(EList<ScenarioRealization> value);
	boolean validateOwnedConstraintDurations(EList<ConstraintDuration> value);
	boolean validateContainedFunctions(EList<AbstractFunction> value);
	boolean validateContainedParts(EList<Part> value);
	boolean validateReferencedScenarios(EList<Scenario> value);
	boolean validateRealizedScenarios(EList<Scenario> value);
	boolean validateRealizingScenarios(EList<Scenario> value);
}
