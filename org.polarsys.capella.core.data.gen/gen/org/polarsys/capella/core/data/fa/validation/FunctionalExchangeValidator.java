/**
 *
 * $Id$
 */
package org.polarsys.capella.core.data.fa.validation;

import org.eclipse.emf.common.util.EList;

import org.polarsys.capella.core.data.fa.ComponentExchange;
import org.polarsys.capella.core.data.fa.ComponentExchangeFunctionalExchangeAllocation;
import org.polarsys.capella.core.data.fa.ExchangeCategory;
import org.polarsys.capella.core.data.fa.FunctionInputPort;
import org.polarsys.capella.core.data.fa.FunctionOutputPort;
import org.polarsys.capella.core.data.fa.FunctionalChain;
import org.polarsys.capella.core.data.fa.FunctionalExchange;
import org.polarsys.capella.core.data.fa.FunctionalExchangeRealization;
import org.polarsys.capella.core.data.fa.FunctionalExchangeSpecification;

import org.polarsys.capella.core.data.information.ExchangeItem;

/**
 * A sample validator interface for {@link org.polarsys.capella.core.data.fa.FunctionalExchange}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface FunctionalExchangeValidator {
	boolean validate();

	boolean validateExchangeSpecifications(EList<FunctionalExchangeSpecification> value);
	boolean validateInvolvingFunctionalChains(EList<FunctionalChain> value);
	boolean validateExchangedItems(EList<ExchangeItem> value);
	boolean validateAllocatingComponentExchanges(EList<ComponentExchange> value);
	boolean validateIncomingComponentExchangeFunctionalExchangeRealizations(EList<ComponentExchangeFunctionalExchangeAllocation> value);
	boolean validateIncomingFunctionalExchangeRealizations(EList<FunctionalExchangeRealization> value);
	boolean validateOutgoingFunctionalExchangeRealizations(EList<FunctionalExchangeRealization> value);
	boolean validateCategories(EList<ExchangeCategory> value);
	boolean validateOwnedFunctionalExchangeRealizations(EList<FunctionalExchangeRealization> value);
	boolean validateSourceFunctionOutputPort(FunctionOutputPort value);
	boolean validateTargetFunctionInputPort(FunctionInputPort value);
	boolean validateRealizedFunctionalExchanges(EList<FunctionalExchange> value);
	boolean validateRealizingFunctionalExchanges(EList<FunctionalExchange> value);
}
