/**
 *
 * $Id$
 */
package org.polarsys.capella.core.data.fa.validation;

import org.eclipse.emf.common.util.EList;

import org.polarsys.capella.core.data.capellacommon.State;
import org.polarsys.capella.core.data.capellacommon.StateMachine;

import org.polarsys.capella.core.data.ctx.Capability;

import org.polarsys.capella.core.data.fa.AbstractFunction;
import org.polarsys.capella.core.data.fa.AbstractFunctionalBlock;
import org.polarsys.capella.core.data.fa.ComponentFunctionalAllocation;
import org.polarsys.capella.core.data.fa.FunctionKind;
import org.polarsys.capella.core.data.fa.FunctionRealization;
import org.polarsys.capella.core.data.fa.FunctionSpecification;
import org.polarsys.capella.core.data.fa.FunctionalChain;
import org.polarsys.capella.core.data.fa.FunctionalExchange;

import org.polarsys.capella.core.data.la.CapabilityRealization;

/**
 * A sample validator interface for {@link org.polarsys.capella.core.data.fa.AbstractFunction}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface AbstractFunctionValidator {
	boolean validate();

	boolean validateKind(FunctionKind value);
	boolean validateCondition(String value);
	boolean validateOwnedFunctions(EList<AbstractFunction> value);
	boolean validateOwnedFunctionRealizations(EList<FunctionRealization> value);
	boolean validateOwnedFunctionalExchanges(EList<FunctionalExchange> value);
	boolean validateSubFunctions(EList<AbstractFunction> value);
	boolean validateOutFunctionRealizations(EList<FunctionRealization> value);
	boolean validateInFunctionRealizations(EList<FunctionRealization> value);
	boolean validateComponentFunctionalAllocations(EList<ComponentFunctionalAllocation> value);
	boolean validateAllocationBlocks(EList<AbstractFunctionalBlock> value);
	boolean validateAvailableInStates(EList<State> value);
	boolean validateInvolvingCapabilities(EList<Capability> value);
	boolean validateInvolvingCapabilityRealizations(EList<CapabilityRealization> value);
	boolean validateInvolvingFunctionalChains(EList<FunctionalChain> value);
	boolean validateLinkedStateMachine(StateMachine value);
	boolean validateLinkedFunctionSpecification(FunctionSpecification value);
}
