/**
 *
 * $Id$
 */
package org.polarsys.capella.core.data.fa.validation;

import org.eclipse.emf.common.util.EList;

import org.polarsys.capella.core.data.cs.Part;
import org.polarsys.capella.core.data.cs.PhysicalLink;

import org.polarsys.capella.core.data.fa.ComponentExchange;
import org.polarsys.capella.core.data.fa.ComponentExchangeCategory;
import org.polarsys.capella.core.data.fa.ComponentExchangeEnd;
import org.polarsys.capella.core.data.fa.ComponentExchangeFunctionalExchangeAllocation;
import org.polarsys.capella.core.data.fa.ComponentExchangeKind;
import org.polarsys.capella.core.data.fa.ComponentExchangeRealization;
import org.polarsys.capella.core.data.fa.FunctionalExchange;

import org.polarsys.capella.core.data.information.Port;

/**
 * A sample validator interface for {@link org.polarsys.capella.core.data.fa.ComponentExchange}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface ComponentExchangeValidator {
	boolean validate();

	boolean validateKind(ComponentExchangeKind value);
	boolean validateOriented(boolean value);
	boolean validateAllocatedFunctionalExchanges(EList<FunctionalExchange> value);
	boolean validateIncomingComponentExchangeRealizations(EList<ComponentExchangeRealization> value);
	boolean validateOutgoingComponentExchangeRealizations(EList<ComponentExchangeRealization> value);
	boolean validateOutgoingComponentExchangeFunctionalExchangeAllocations(EList<ComponentExchangeFunctionalExchangeAllocation> value);
	boolean validateOwnedComponentExchangeFunctionalExchangeAllocations(EList<ComponentExchangeFunctionalExchangeAllocation> value);
	boolean validateOwnedComponentExchangeRealizations(EList<ComponentExchangeRealization> value);
	boolean validateOwnedComponentExchangeEnds(EList<ComponentExchangeEnd> value);
	boolean validateSourcePort(Port value);
	boolean validateSourcePart(Part value);
	boolean validateTargetPort(Port value);
	boolean validateTargetPart(Part value);
	boolean validateCategories(EList<ComponentExchangeCategory> value);
	boolean validateAllocatorPhysicalLinks(EList<PhysicalLink> value);
	boolean validateRealizedComponentExchanges(EList<ComponentExchange> value);
	boolean validateRealizingComponentExchanges(EList<ComponentExchange> value);
}
