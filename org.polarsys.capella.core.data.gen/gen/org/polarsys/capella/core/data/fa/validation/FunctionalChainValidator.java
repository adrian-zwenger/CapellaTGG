/**
 *
 * $Id$
 */
package org.polarsys.capella.core.data.fa.validation;

import org.eclipse.emf.common.util.EList;

import org.polarsys.capella.core.data.capellacommon.State;

import org.polarsys.capella.core.data.capellacore.Constraint;
import org.polarsys.capella.core.data.capellacore.InvolvedElement;

import org.polarsys.capella.core.data.ctx.Capability;

import org.polarsys.capella.core.data.fa.AbstractFunction;
import org.polarsys.capella.core.data.fa.AbstractFunctionalBlock;
import org.polarsys.capella.core.data.fa.ControlNode;
import org.polarsys.capella.core.data.fa.FunctionalChain;
import org.polarsys.capella.core.data.fa.FunctionalChainInvolvement;
import org.polarsys.capella.core.data.fa.FunctionalChainKind;
import org.polarsys.capella.core.data.fa.FunctionalChainRealization;
import org.polarsys.capella.core.data.fa.FunctionalExchange;
import org.polarsys.capella.core.data.fa.SequenceLink;

import org.polarsys.capella.core.data.la.CapabilityRealization;

/**
 * A sample validator interface for {@link org.polarsys.capella.core.data.fa.FunctionalChain}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface FunctionalChainValidator {
	boolean validate();

	boolean validateKind(FunctionalChainKind value);
	boolean validateOwnedFunctionalChainInvolvements(EList<FunctionalChainInvolvement> value);
	boolean validateOwnedFunctionalChainRealizations(EList<FunctionalChainRealization> value);
	boolean validateInvolvedFunctionalChainInvolvements(EList<FunctionalChainInvolvement> value);
	boolean validateInvolvedFunctions(EList<AbstractFunction> value);
	boolean validateInvolvedFunctionalExchanges(EList<FunctionalExchange> value);
	boolean validateInvolvedElements(EList<InvolvedElement> value);
	boolean validateEnactedFunctions(EList<AbstractFunction> value);
	boolean validateEnactedFunctionalBlocks(EList<AbstractFunctionalBlock> value);
	boolean validateAvailableInStates(EList<State> value);
	boolean validateFirstFunctionalChainInvolvements(EList<FunctionalChainInvolvement> value);
	boolean validateInvolvingCapabilities(EList<Capability> value);
	boolean validateInvolvingCapabilityRealizations(EList<CapabilityRealization> value);
	boolean validateRealizedFunctionalChains(EList<FunctionalChain> value);
	boolean validateRealizingFunctionalChains(EList<FunctionalChain> value);
	boolean validatePreCondition(Constraint value);
	boolean validatePostCondition(Constraint value);
	boolean validateOwnedSequenceNodes(EList<ControlNode> value);
	boolean validateOwnedSequenceLinks(EList<SequenceLink> value);
}
