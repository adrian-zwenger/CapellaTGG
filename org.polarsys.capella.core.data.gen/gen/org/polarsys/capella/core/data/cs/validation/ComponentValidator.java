/**
 *
 * $Id$
 */
package org.polarsys.capella.core.data.cs.validation;

import org.eclipse.emf.common.util.EList;

import org.polarsys.capella.core.data.cs.Component;
import org.polarsys.capella.core.data.cs.ComponentRealization;
import org.polarsys.capella.core.data.cs.Interface;
import org.polarsys.capella.core.data.cs.InterfaceImplementation;
import org.polarsys.capella.core.data.cs.InterfaceUse;
import org.polarsys.capella.core.data.cs.Part;
import org.polarsys.capella.core.data.cs.PhysicalLink;
import org.polarsys.capella.core.data.cs.PhysicalLinkCategory;
import org.polarsys.capella.core.data.cs.PhysicalPath;
import org.polarsys.capella.core.data.cs.PhysicalPort;

import org.polarsys.capella.core.data.fa.ComponentPort;

/**
 * A sample validator interface for {@link org.polarsys.capella.core.data.cs.Component}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface ComponentValidator {
	boolean validate();

	boolean validateActor(boolean value);
	boolean validateHuman(boolean value);
	boolean validateOwnedInterfaceUses(EList<InterfaceUse> value);
	boolean validateUsedInterfaceLinks(EList<InterfaceUse> value);
	boolean validateUsedInterfaces(EList<Interface> value);
	boolean validateOwnedInterfaceImplementations(EList<InterfaceImplementation> value);
	boolean validateImplementedInterfaceLinks(EList<InterfaceImplementation> value);
	boolean validateImplementedInterfaces(EList<Interface> value);
	boolean validateOwnedComponentRealizations(EList<ComponentRealization> value);
	boolean validateRealizedComponents(EList<Component> value);
	boolean validateRealizingComponents(EList<Component> value);
	boolean validateProvidedInterfaces(EList<Interface> value);
	boolean validateRequiredInterfaces(EList<Interface> value);
	boolean validateContainedComponentPorts(EList<ComponentPort> value);
	boolean validateContainedParts(EList<Part> value);
	boolean validateContainedPhysicalPorts(EList<PhysicalPort> value);
	boolean validateOwnedPhysicalPath(EList<PhysicalPath> value);
	boolean validateOwnedPhysicalLinks(EList<PhysicalLink> value);
	boolean validateOwnedPhysicalLinkCategories(EList<PhysicalLinkCategory> value);
	boolean validateRepresentingParts(EList<Part> value);
}
