/**
 *
 * $Id$
 */
package org.polarsys.capella.core.data.cs.validation;

import org.eclipse.emf.common.util.EList;

import org.polarsys.capella.core.data.capellacommon.AbstractCapabilityPkg;

import org.polarsys.capella.core.data.cs.ArchitectureAllocation;
import org.polarsys.capella.core.data.cs.BlockArchitecture;
import org.polarsys.capella.core.data.cs.Component;
import org.polarsys.capella.core.data.cs.InterfacePkg;

import org.polarsys.capella.core.data.information.DataPkg;

import org.polarsys.capella.core.data.requirement.RequirementsPkg;

/**
 * A sample validator interface for {@link org.polarsys.capella.core.data.cs.BlockArchitecture}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface BlockArchitectureValidator {
	boolean validate();

	boolean validateOwnedRequirementPkgs(EList<RequirementsPkg> value);
	boolean validateOwnedAbstractCapabilityPkg(AbstractCapabilityPkg value);
	boolean validateOwnedInterfacePkg(InterfacePkg value);
	boolean validateOwnedDataPkg(DataPkg value);
	boolean validateProvisionedArchitectureAllocations(EList<ArchitectureAllocation> value);
	boolean validateProvisioningArchitectureAllocations(EList<ArchitectureAllocation> value);
	boolean validateAllocatedArchitectures(EList<BlockArchitecture> value);
	boolean validateAllocatingArchitectures(EList<BlockArchitecture> value);
	boolean validateSystem(Component value);
}
